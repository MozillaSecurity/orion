#!/usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import os
import re
import stat
import sys
from pathlib import Path
from subprocess import run


def _log_run(cmd, capture=False):
    print(f"+ {' '.join(cmd)}", file=sys.stderr)
    if capture:
        return run(cmd, capture_output=True, text=True, errors="replace", check=True)
    return run(cmd, check=True)


def main():
    if sys.argv[1:]:
        print(f"usage: {sys.argv[0]}", file=sys.stderr)
        sys.exit(2)

    if not os.environ.get("HOMEBREW_PREFIX"):
        print("Missing HOMEBREW_PREFIX", file=sys.stderr)
        sys.exit(2)

    pattern = f"#!{os.environ['HOMEBREW_PREFIX']}".encode()
    for file_path in Path(os.environ["HOMEBREW_PREFIX"]).glob("**/*"):
        if not file_path.is_file() or file_path.is_symlink():
            continue

        # Rewrite she-bang scripts that reference an interpreter in HOMEBREW_PREFIX to
        # use /usr/bin/env instead
        rewrite = False
        with file_path.open("rb") as file_hnd:
            if file_hnd.read(len(pattern)).startswith(pattern):
                rewrite = True
        if rewrite:
            file_data = file_path.read_text()
            file_data = re.sub(r"^#!(/[^/]+)*/([^/]+)", r"#!/usr/bin/env \2", file_data)
            file_path.write_text(file_data)
            continue

        # Make all Mach-O binaries load dylibs relative to themselves
        result = _log_run(["file", "-b", str(file_path)], capture=True)
        if "Mach-O" not in result.stdout or "(" in result.stdout:
            continue

        # preserve file permissions to restore later
        orig_mode = file_path.stat().st_mode
        is_read_only = not (orig_mode & stat.S_IWUSR)
        changed = False

        if "executable" not in result.stdout:
            changed = True
            # some files are installed read-only. ensure they are writable
            if is_read_only:
                file_path.chmod(orig_mode | stat.S_IWUSR)
            # change lib id to @rpath
            _log_run(
                ["install_name_tool", "-id", f"@rpath/{file_path.name}", str(file_path)]
            )

        # in both cases, make all loads relative to @loader_path
        result = _log_run(["otool", "-L", str(file_path)], capture=True)
        libs = [
            line.split()[0]
            for line in result.stdout.splitlines()[1:]
            if os.environ["HOMEBREW_PREFIX"] in line
        ]
        if libs:
            changed = True
            # some files are installed read-only. ensure they are writable
            if is_read_only:
                file_path.chmod(orig_mode | stat.S_IWUSR)
            args = ["install_name_tool"]
            for lib in libs:
                # lib is probably not a subpath of file_path.parent, so
                # PurePath.relative_to will not work (see footnote in pathlib docs)
                rel_lib = os.path.relpath(
                    Path(lib).resolve(), file_path.parent.resolve()
                )
                args.extend(("-change", lib, f"@loader_path/{rel_lib}"))
            args.append(str(file_path))
            _log_run(args)

        # restore file permissions
        if is_read_only and changed:
            file_path.chmod(orig_mode)


if __name__ == "__main__":
    main()
