[build-system]
requires = ["setuptools>=64"]
build-backend = "setuptools.build_meta"

[project]
name = "ingestor"
requires-python = ">=3.9"
version = "v0.0.0"
authors = [
    {name = "Jesse Schwartzentruber", email = "jschwartzentruber@mozilla.com"},
]
description = "Ingestor for failed task logs into FuzzManager"
keywords = ["firefox", "fuzz", "fuzzing", "test", "testing"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Programming Language :: Python :: 3",
    "Topic :: Security",
    "Topic :: Software Development :: Testing",
]
license = {text = "MPL 2.0"}
maintainers = [
    {name = "Mozilla Fuzzing Team", email = "fuzzing@mozilla.com"},
]
dynamic = ["readme"]
dependencies = [
    "FuzzManager",
    "requests",
    "taskcluster",
]

[project.optional-dependencies]
dev = ["pre-commit", "tox"]

[project.scripts]
ingest = "ingestor:Ingestor.main"

[project.urls]
Homepage = "https://github.com/MozillaSecurity/orion"
Issues = "https://github.com/MozillaSecurity/orion/issues"
Repository = "https://github.com/MozillaSecurity/orion.git"

[tool.setuptools.dynamic]
readme = {file = ["README.md"], content-type = "text/markdown"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["ingestor"]

[tool.codespell]
ignore-regex = "\\[fnrstv]"

[tool.coverage.run]
omit = [
    "*/__main__.py",
    "*/test_*",
    "*/build/*",
    "*/dist/*",
    "*/resources/*",
    "*/.tox/*",
    "*/.egg/*",
]

[tool.coverage.report]
exclude_lines = [
    "@(abc.)?abstract*",
    "except ImportError(.*):",
    "if __name__ == .__main__.:",
    "pragma: no cover",
]

[tool.mypy]
ignore_missing_imports = true
strict = true
show_error_codes = true
warn_unused_ignores = false

[tool.pylint.format]
max-line-length = 88

[tool.pylint.messages_control]
disable = [
    "duplicate-code",
    "fixme",
    "import-error",
    # need to finish adding docs...
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "subprocess-run-check",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-return-statements",
    "too-many-statements",
]

[tool.pylint.typecheck]
ignored-modules = ["pytest"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::pytest.PytestCollectionWarning",
]
log_level = "DEBUG"

[tool.ruff.lint]
select = [
    # flake8
    "E",
    "F",
    "W",
    # flynt
    "FLY",
    # isort
    "I",
    # perflint
    "PERF",
    # pyupgrade
    "UP",
    # includes yesqa
    "RUF",
]

[tool.ruff.lint.isort]
known-first-party = ["ingestor"]
