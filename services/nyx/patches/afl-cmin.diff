diff --git a/afl-cmin b/afl-cmin
index a88460a8..32f5b9f0 100755
--- a/afl-cmin
+++ b/afl-cmin
@@ -120,6 +120,7 @@ function usage() {
 "  -A            - allow crashes and timeouts (not recommended)\n" \
 "  -C            - keep crashing inputs, reject everything else\n" \
 "  -e            - solve for edge coverage only, ignore hit counts\n" \
+"  -r            - resume a previous minimization run\n" \
 "\n" \
 "For additional tips, please consult README.md\n" \
 "\n" \
@@ -163,7 +164,7 @@ BEGIN {
   # process options
   Opterr = 1    # default is to diagnose
   Optind = 1    # skip ARGV[0]
-  while ((_go_c = getopt(ARGC, ARGV, "hi:o:f:m:t:eACOQUXYT:?")) != -1) {
+  while ((_go_c = getopt(ARGC, ARGV, "hi:o:f:m:t:eACOQUXYT:r?")) != -1) {
     if (_go_c == "i") {
       if (!Optarg) usage()
       if (in_dir) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
@@ -236,7 +237,11 @@ BEGIN {
       extra_par = extra_par " -X"
       nyx_mode = 1
       continue
-    } else 
+    } else
+    if (_go_c == "r") {
+      resume_mode = 1
+      continue
+    } else
     if (_go_c == "?") {
       exit 1
     } else 
@@ -283,6 +288,11 @@ BEGIN {
     exit 1
   }
 
+  # Set threads to 1 for resume mode if not already specified
+  if (resume_mode && !threads) {
+    threads = 1
+  }
+
   if (!threads && !stdin_file && !nyx_mode) {
     print "[*] Are you aware of the '-T all' parallelize option that improves the speed for large/slow corpuses?"
   }
@@ -330,14 +340,18 @@ BEGIN {
     target_bin = tnew
   }
 
-  if (0 == system ( "grep -aq AFL_DUMP_MAP_SIZE " target_bin )) {
-    echo "[!] Trying to obtain the map size of the target ..."
-    get_map_size = "AFL_DUMP_MAP_SIZE=1 " target_bin
-    get_map_size | getline mapsize
-    close(get_map_size)
-    if (mapsize && mapsize > 65535 && mapsize < 100000000) {
-      AFL_MAP_SIZE = "AFL_MAP_SIZE="mapsize" "
-      print "[+] Setting "AFL_MAP_SIZE
+  if (!nyx_mode) {
+    if (!ENVIRON["AFL_MAP_SIZE"] && 0 == system ( "grep -aq AFL_DUMP_MAP_SIZE " target_bin )) {
+      echo "[!] Trying to obtain the map size of the target ..."
+      get_map_size = "AFL_DUMP_MAP_SIZE=1 " target_bin
+      get_map_size | getline mapsize
+      close(get_map_size)
+      if (mapsize && mapsize > 65535 && mapsize < 100000000) {
+        AFL_MAP_SIZE = "AFL_MAP_SIZE="mapsize" "
+        print "[+] Setting "AFL_MAP_SIZE
+      }
+    } else {
+      AFL_MAP_SIZE = "AFL_MAP_SIZE=" ENVIRON["AFL_MAP_SIZE"] " "
     }
   }
 
@@ -348,6 +362,8 @@ BEGIN {
     }
   }
 
+  AFL_PRELOAD = ("AFL_PRELOAD" in ENVIRON) ? "AFL_PRELOAD=" ENVIRON["AFL_PRELOAD"] " " : ""
+
   if (0 != system( "test -d "in_dir )) {
     print "[-] Error: directory '"in_dir"' not found." > "/dev/stderr"
     exit 1
@@ -361,15 +377,17 @@ BEGIN {
   #  in_dir = in_dir "/queue"
   #}
 
-  system("rm -rf "trace_dir" 2>/dev/null");
-  system("rm "out_dir"/id[:_]* 2>/dev/null")
+  # system("rm -rf "trace_dir" 2>/dev/null");
+  # system("rm "out_dir"/id[:_]* 2>/dev/null")
 
   cmd = "ls "out_dir"/* 2>/dev/null | wc -l"
   cmd | getline noofentries
   close(cmd)
   if (0 == system( "test -d "out_dir" -a "noofentries" -gt 0" )) {
-    print "[-] Error: directory '"out_dir"' exists and is not empty - delete it first." > "/dev/stderr"
-    exit 1
+    if (!resume_mode) {
+      print "[-] Error: directory '"out_dir"' exists and is not empty - delete it first." > "/dev/stderr"
+      exit 1
+    }
   }
 
   if (threads) {
@@ -379,7 +397,7 @@ BEGIN {
     if (threads == "all") {
       threads = nproc
     } else {
-      if (!(threads > 1 && threads <= nproc)) {
+      if (!(threads >= 1 && threads <= nproc)) {
         print "[-] Error: -T option must be between 1 and "nproc" or \"all\"." > "/dev/stderr"
         exit 1
       }
@@ -449,7 +467,7 @@ BEGIN {
   in_count = i
 
   first_file = infilesSmallToBigFull[0]
-  
+
   #if (0 == system("test -d ""\""in_dir"/"first_file"\"")) {
   #  print "[-] Error: The input directory is empty or contains subdirectories - please fix." > "/dev/stderr"
   #  exit 1
@@ -470,10 +488,10 @@ BEGIN {
     print "[*] Testing the target binary..."
 
     if (!stdin_file) {
-      system(AFL_MAP_SIZE "AFL_CMIN_ALLOW_ANY=1 "AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"/.run_test\" -Z "extra_par" -- \""target_bin"\" "prog_args_string" <\""in_dir"/"first_file"\"")
+      system(AFL_MAP_SIZE AFL_PRELOAD "AFL_CMIN_ALLOW_ANY=1 "AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"/.run_test\" -Z "extra_par" -- \""target_bin"\" "prog_args_string" <\""in_dir"/"first_file"\"")
     } else {
       system("cp \""in_dir"/"first_file"\" "stdin_file)
-      system(AFL_MAP_SIZE "AFL_CMIN_ALLOW_ANY=1 "AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"/.run_test\" -Z "extra_par" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null")
+      system(AFL_MAP_SIZE AFL_PRELOAD "AFL_CMIN_ALLOW_ANY=1 "AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"/.run_test\" -Z "extra_par" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null")
     }
 
     first_count = 0
@@ -508,8 +526,32 @@ BEGIN {
 
   if (threads) {
 
-    inputsperfile = int(in_count / threads)
-    if (in_count % threads) {
+    # Create arrays for chunking - filter if resume mode, otherwise copy all
+    if (resume_mode) {
+      original_count = in_count
+      chunk_count = 0
+      for (i = 0; i < in_count; i++) {
+        trace_file = trace_dir"/"infilesSmallToBig[i]
+        if (0 != system("test -f \""trace_file"\"")) {
+          # Trace file doesn't exist, include this input file for processing
+          chunkSmallToBig[chunk_count] = infilesSmallToBig[i]
+          chunkSmallToBigFull[chunk_count] = infilesSmallToBigFull[i]
+          chunk_count++
+        }
+      }
+      already_processed = original_count - chunk_count
+      print "[*] Resume mode: "chunk_count" files need processing ("already_processed" already processed)."
+    } else {
+      # Copy all files for processing
+      chunk_count = in_count
+      for (i = 0; i < in_count; i++) {
+        chunkSmallToBig[i] = infilesSmallToBig[i]
+        chunkSmallToBigFull[i] = infilesSmallToBigFull[i]
+      }
+    }
+
+    inputsperfile = int(chunk_count / threads)
+    if (chunk_count % threads) {
       inputsperfile++;
     }
 
@@ -517,12 +559,14 @@ BEGIN {
     tmpfile=out_dir "/.filelist"
     for (instance = 1; instance < threads; instance++) {
       for (i = 0; i < inputsperfile; i++) {
-        print in_dir"/"infilesSmallToBigFull[cnt] >> tmpfile"."instance
-        cnt++
+        if (cnt < chunk_count) {
+          print in_dir"/"chunkSmallToBigFull[cnt] >> tmpfile"."instance
+          cnt++
+        }
       }
     }
-    for (; cnt < in_count; cnt++) {
-      print in_dir"/"infilesSmallToBigFull[cnt] >> tmpfile"."threads
+    for (; cnt < chunk_count; cnt++) {
+      print in_dir"/"chunkSmallToBigFull[cnt] >> tmpfile"."threads
     }
 
   }
@@ -537,12 +581,12 @@ BEGIN {
     for (i = 1; i <= threads; i++) {
 
       if (!stdin_file) {
-#        print " { "AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -- \""target_bin"\" "prog_args_string"; > "tmpfile"."i".done ; } &"
-        retval = system(" { "AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -- \""target_bin"\" "prog_args_string"; > "tmpfile"."i".done ; } &")
+#        print " { "AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -- \""target_bin"\" "prog_args_string"; > "tmpfile"."i".done ; } &"
+        retval = system(" { "AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -- \""target_bin"\" "prog_args_string"; > "tmpfile"."i".done ; } &")
       } else {
         stdin_file=tmpfile"."i".stdin"
-#        print " { "AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null; > "tmpfile"."i".done ; } &"
-        retval = system(" { "AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null; > "tmpfile"."i".done ; } &")
+#        print " { "AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null; > "tmpfile"."i".done ; } &"
+        retval = system(" { "AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null; > "tmpfile"."i".done ; } &")
       }
     }
     print "[*] Waiting for parallel tasks to complete ..."
@@ -562,11 +606,11 @@ BEGIN {
     if (!stdin_file) {
       print "    Processing "in_count" files (forkserver mode)..."
 #      print AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -- \""target_bin"\" "prog_args_string
-      retval = system(AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -- \""target_bin"\" "prog_args_string)
+      retval = system(AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -- \""target_bin"\" "prog_args_string)
     } else {
       print "    Processing "in_count" files (forkserver mode)..."
 #    print AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null"
-      retval = system(AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null")
+      retval = system(AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null")
     }
 
     if (retval && (!AFL_CMIN_CRASHES_ONLY && !AFL_CMIN_ALLOW_ANY)) {
