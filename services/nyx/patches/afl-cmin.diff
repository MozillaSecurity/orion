diff --git a/afl-cmin b/afl-cmin
index a88460a8..b54a1b3f 100755
--- a/afl-cmin
+++ b/afl-cmin
@@ -115,6 +115,8 @@ function usage() {
 "  -Q            - use binary-only instrumentation (QEMU mode)\n" \
 "  -U            - use unicorn-based instrumentation (unicorn mode)\n" \
 "  -X            - use Nyx mode\n" \
+"  -c            - collect traces only (no processing)\n" \
+"  -p            - process saved trace files only (no collection)\n" \
 "\n" \
 "Minimization settings:\n" \
 "  -A            - allow crashes and timeouts (not recommended)\n" \
@@ -163,44 +165,44 @@ BEGIN {
   # process options
   Opterr = 1    # default is to diagnose
   Optind = 1    # skip ARGV[0]
-  while ((_go_c = getopt(ARGC, ARGV, "hi:o:f:m:t:eACOQUXYT:?")) != -1) {
+  while ((_go_c = getopt(ARGC, ARGV, "hi:o:f:m:t:cpeACOQUXYT:?")) != -1) {
     if (_go_c == "i") {
       if (!Optarg) usage()
       if (in_dir) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
       in_dir = Optarg
       continue
-    } else 
+    } else
     if (_go_c == "T") {
       if (!Optarg) usage()
       if (threads) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
       threads = Optarg
       continue
-    } else 
+    } else
     if (_go_c == "o") {
       if (!Optarg) usage()
       if (out_dir) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
       out_dir = Optarg
       continue
-    } else 
+    } else
     if (_go_c == "f") {
       if (!Optarg) usage()
       if (stdin_file) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
       stdin_file = Optarg
       continue
-    } else 
+    } else
     if (_go_c == "m") {
       if (!Optarg) usage()
       if (mem_limit) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
       mem_limit = Optarg
       mem_limit_given = 1
       continue
-    } else 
+    } else
     if (_go_c == "t") {
       if (!Optarg) usage()
       if (timeout) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
       timeout = Optarg
       continue
-    } else 
+    } else
     if (_go_c == "C") {
       AFL_CMIN_CRASHES_ONLY = "AFL_CMIN_CRASHES_ONLY=1 "
       continue
@@ -236,6 +238,15 @@ BEGIN {
       extra_par = extra_par " -X"
       nyx_mode = 1
       continue
+    } else
+    if (_go_c == "c") {
+      collect_traces_only = 1
+      ENVIRON["AFL_KEEP_TRACES"] = 1
+      continue
+    } else
+    if (_go_c == "p") {
+      process_traces_only = 1
+      continue
     } else 
     if (_go_c == "?") {
       exit 1
@@ -330,14 +341,18 @@ BEGIN {
     target_bin = tnew
   }
 
-  if (0 == system ( "grep -aq AFL_DUMP_MAP_SIZE " target_bin )) {
-    echo "[!] Trying to obtain the map size of the target ..."
-    get_map_size = "AFL_DUMP_MAP_SIZE=1 " target_bin
-    get_map_size | getline mapsize
-    close(get_map_size)
-    if (mapsize && mapsize > 65535 && mapsize < 100000000) {
-      AFL_MAP_SIZE = "AFL_MAP_SIZE="mapsize" "
-      print "[+] Setting "AFL_MAP_SIZE
+  if (!nyx_mode) {
+    if (!ENVIRON["AFL_MAP_SIZE"] && 0 == system ( "grep -aq AFL_DUMP_MAP_SIZE " target_bin )) {
+      echo "[!] Trying to obtain the map size of the target ..."
+      get_map_size = "AFL_DUMP_MAP_SIZE=1 " target_bin
+      get_map_size | getline mapsize
+      close(get_map_size)
+      if (mapsize && mapsize > 65535 && mapsize < 100000000) {
+        AFL_MAP_SIZE = "AFL_MAP_SIZE="mapsize" "
+        print "[+] Setting "AFL_MAP_SIZE
+      }
+    } else {
+      AFL_MAP_SIZE = "AFL_MAP_SIZE=" ENVIRON["AFL_MAP_SIZE"] " "
     }
   }
 
@@ -348,6 +363,8 @@ BEGIN {
     }
   }
 
+  AFL_PRELOAD = ("AFL_PRELOAD" in ENVIRON) ? "AFL_PRELOAD=" ENVIRON["AFL_PRELOAD"] " " : ""
+
   if (0 != system( "test -d "in_dir )) {
     print "[-] Error: directory '"in_dir"' not found." > "/dev/stderr"
     exit 1
@@ -361,8 +378,10 @@ BEGIN {
   #  in_dir = in_dir "/queue"
   #}
 
-  system("rm -rf "trace_dir" 2>/dev/null");
-  system("rm "out_dir"/id[:_]* 2>/dev/null")
+  if (!process_traces_only) {
+    system("rm -rf "trace_dir" 2>/dev/null");
+    system("rm "out_dir"/id[:_]* 2>/dev/null")
+  }
 
   cmd = "ls "out_dir"/* 2>/dev/null | wc -l"
   cmd | getline noofentries
@@ -470,10 +489,10 @@ BEGIN {
     print "[*] Testing the target binary..."
 
     if (!stdin_file) {
-      system(AFL_MAP_SIZE "AFL_CMIN_ALLOW_ANY=1 "AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"/.run_test\" -Z "extra_par" -- \""target_bin"\" "prog_args_string" <\""in_dir"/"first_file"\"")
+      system(AFL_MAP_SIZE AFL_PRELOAD "AFL_CMIN_ALLOW_ANY=1 "AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"/.run_test\" -Z "extra_par" -- \""target_bin"\" "prog_args_string" <\""in_dir"/"first_file"\"")
     } else {
       system("cp \""in_dir"/"first_file"\" "stdin_file)
-      system(AFL_MAP_SIZE "AFL_CMIN_ALLOW_ANY=1 "AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"/.run_test\" -Z "extra_par" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null")
+      system(AFL_MAP_SIZE AFL_PRELOAD "AFL_CMIN_ALLOW_ANY=1 "AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"/.run_test\" -Z "extra_par" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null")
     }
 
     first_count = 0
@@ -505,8 +524,9 @@ BEGIN {
   #############################
   # STEP 1: Collecting traces #
   #############################
+  if (!process_traces_only) {
 
-  if (threads) {
+    if (threads) {
 
     inputsperfile = int(in_count / threads)
     if (in_count % threads) {
@@ -537,12 +557,12 @@ BEGIN {
     for (i = 1; i <= threads; i++) {
 
       if (!stdin_file) {
-#        print " { "AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -- \""target_bin"\" "prog_args_string"; > "tmpfile"."i".done ; } &"
-        retval = system(" { "AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -- \""target_bin"\" "prog_args_string"; > "tmpfile"."i".done ; } &")
+#        print " { "AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -- \""target_bin"\" "prog_args_string"; > "tmpfile"."i".done ; } &"
+        retval = system(" { "AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -- \""target_bin"\" "prog_args_string"; > "tmpfile"."i".done ; } &")
       } else {
         stdin_file=tmpfile"."i".stdin"
-#        print " { "AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null; > "tmpfile"."i".done ; } &"
-        retval = system(" { "AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null; > "tmpfile"."i".done ; } &")
+#        print " { "AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null; > "tmpfile"."i".done ; } &"
+        retval = system(" { "AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -I \""tmpfile"."i"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null; > "tmpfile"."i".done ; } &")
       }
     }
     print "[*] Waiting for parallel tasks to complete ..."
@@ -562,11 +582,11 @@ BEGIN {
     if (!stdin_file) {
       print "    Processing "in_count" files (forkserver mode)..."
 #      print AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -- \""target_bin"\" "prog_args_string
-      retval = system(AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -- \""target_bin"\" "prog_args_string)
+      retval = system(AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -- \""target_bin"\" "prog_args_string)
     } else {
       print "    Processing "in_count" files (forkserver mode)..."
 #    print AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null"
-      retval = system(AFL_MAP_SIZE AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null")
+      retval = system(AFL_MAP_SIZE AFL_PRELOAD AFL_CMIN_ALLOW_ANY AFL_CMIN_CRASHES_ONLY"\""showmap"\" -m "mem_limit" -t "timeout" -o \""trace_dir"\" -Z "extra_par" -i \""in_dir"\" -H \""stdin_file"\" -- \""target_bin"\" "prog_args_string" </dev/null")
     }
 
     if (retval && (!AFL_CMIN_CRASHES_ONLY && !AFL_CMIN_ALLOW_ANY)) {
@@ -581,6 +601,13 @@ BEGIN {
 
   }
 
+  }
+
+  if (collect_traces_only) {
+    print "[*] Collected traces for "in_count" input files in '"trace_dir"'."
+    exit 0
+  }
+
   #######################################################
   # STEP 2: register smallest input file for each tuple #
   # STEP 3: copy that file (at most once)               #
